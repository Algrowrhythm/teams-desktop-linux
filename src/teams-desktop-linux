#!/bin/bash
# Teams Desktop Linux - A lightweight Microsoft Teams PWA wrapper
# Version: 1.0.0
# License: MIT

set -e

# Configuration
readonly TEAMS_URL="https://teams.microsoft.com/v2/"
readonly APP_NAME="Teams Desktop Linux"
readonly APP_CLASS="teams-desktop-linux"
readonly VERSION="1.0.0"
readonly USER_DATA_DIR="$HOME/.local/share/teams-desktop-linux"
readonly CONFIG_FILE="$USER_DATA_DIR/config.json"
readonly LOG_FILE="$USER_DATA_DIR/app.log"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Create necessary directories
init_directories() {
    mkdir -p "$USER_DATA_DIR"
    touch "$LOG_FILE"
    log "Initialized directories"
}

# Detect available browser
detect_browser() {
    local browsers=(
        "google-chrome"
        "chromium"
        "chromium-browser" 
        "microsoft-edge"
        "microsoft-edge-stable"
        "microsoft-edge-dev"
        "brave-browser"
        "vivaldi"
    )
    
    for browser in "${browsers[@]}"; do
        if command -v "$browser" >/dev/null 2>&1; then
            echo "$browser"
            return 0
        fi
    done
    
    return 1
}

# Show browser installation help
show_browser_help() {
    print_color "$RED" "❌ No compatible browser found!"
    echo
    print_color "$YELLOW" "Please install one of the following browsers:"
    echo "  • Google Chrome: https://www.google.com/chrome/"
    echo "  • Chromium: sudo apt install chromium-browser"
    echo "  • Microsoft Edge: https://www.microsoft.com/edge/"
    echo "  • Brave Browser: https://brave.com/"
    echo
    
    # Try to show GUI error if available
    if command -v zenity >/dev/null 2>&1; then
        zenity --error --width=400 --title="Teams Desktop Linux" \
            --text="No compatible browser found!\n\nPlease install Chrome, Chromium, Microsoft Edge, or Brave Browser."
    elif command -v kdialog >/dev/null 2>&1; then
        kdialog --error "No compatible browser found!\n\nPlease install Chrome, Chromium, Microsoft Edge, or Brave Browser."
    elif command -v notify-send >/dev/null 2>&1; then
        notify-send "Teams Desktop Linux" "No compatible browser found! Please install a Chromium-based browser."
    fi
}

# Get browser-specific flags
get_browser_flags() {
    local browser="$1"
    local flags=(
        "--app=$TEAMS_URL"
        "--class=$APP_CLASS"
        "--name=$APP_NAME"
        "--user-data-dir=$USER_DATA_DIR"
        "--disable-features=TranslateUI,VizDisplayCompositor"
        "--enable-features=WebRTCPipeWireCapturer,VaapiVideoDecoder,VaapiVideoEncoder"
        "--disable-default-apps"
        "--no-first-run"
        "--disable-background-mode"
        "--disable-background-networking"
        "--disable-background-timer-throttling"
        "--disable-backgrounding-occluded-windows"
        "--disable-renderer-backgrounding"
        "--enable-aggressive-domstorage-flushing"
        "--enable-quic"
        "--no-default-browser-check"
        "--disable-translate"
        "--disable-sync"
        "--disable-plugins-discovery"
        "--disable-component-extensions-with-background-pages"
        "--disable-extensions-except="
        "--disable-component-update"
        "--new-window"
        "--no-sandbox"
        "--disable-dev-shm-usage"
        "--disable-gpu-sandbox"
        "--disable-software-rasterizer"
    )
    
    # Add browser-specific optimizations
    case "$browser" in
        "google-chrome"|"microsoft-edge"*|"brave-browser")
            flags+=(
                "--enable-hardware-acceleration"
                "--enable-gpu-rasterization"
                "--enable-zero-copy"
                "--enable-native-gpu-memory-buffers"
                "--enable-gpu-memory-buffer-video-frames"
            )
            ;;
        "chromium"*|"vivaldi")
            flags+=(
                "--enable-hardware-acceleration"
                "--enable-gpu-rasterization"
                "--enable-native-gpu-memory-buffers"
            )
            ;;
    esac
    
    # Add Wayland support if available
    if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
        flags+=(
            "--enable-features=UseOzonePlatform"
            "--ozone-platform=wayland"
        )
    fi
    
    printf '%s\n' "${flags[@]}"
}

# Handle command line arguments
handle_arguments() {
    local url="$TEAMS_URL"
    local debug_mode=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                echo "Teams Desktop Linux v$VERSION"
                exit 0
                ;;
            --debug)
                debug_mode=true
                set -x
                shift
                ;;
            --config)
                show_config
                exit 0
                ;;
            --reset)
                reset_config
                exit 0
                ;;
            msteams://*|ms-teams://*)
                url="$1"
                shift
                ;;
            *)
                print_color "$RED" "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    echo "$url"
}

# Show help message
show_help() {
    cat << EOF
Teams Desktop Linux v$VERSION - A lightweight Microsoft Teams PWA wrapper

Usage: $0 [OPTIONS] [URL]

Options:
  -h, --help     Show this help message
  -v, --version  Show version information
  --debug        Enable debug mode
  --config       Show configuration
  --reset        Reset configuration

Examples:
  $0                                    # Launch Teams
  $0 'msteams://l/meetup-join/...'      # Join meeting from URL
  $0 --debug                            # Launch with debug output

For more information, visit: https://github.com/Algrowrhythm/teams-desktop-linux
EOF
}

# Show configuration
show_config() {
    print_color "$BLUE" "📋 Teams Desktop Linux Configuration"
    echo
    echo "Version: $VERSION"
    echo "User Data Dir: $USER_DATA_DIR"
    echo "Log File: $LOG_FILE"
    echo "Config File: $CONFIG_FILE"
    echo
    
    if command -v detect_browser >/dev/null 2>&1; then
        local browser
        if browser=$(detect_browser); then
            echo "Detected Browser: $browser"
        else
            echo "Detected Browser: None"
        fi
    fi
    
    echo "Session Type: ${XDG_SESSION_TYPE:-unknown}"
    echo "Desktop Environment: ${XDG_CURRENT_DESKTOP:-unknown}"
}

# Reset configuration
reset_config() {
    print_color "$YELLOW" "🔄 Resetting configuration..."
    
    if [[ -d "$USER_DATA_DIR" ]]; then
        rm -rf "$USER_DATA_DIR"
        print_color "$GREEN" "✅ Configuration reset successfully!"
    else
        print_color "$YELLOW" "⚠️  No configuration found to reset."
    fi
}

# Check system requirements
check_requirements() {
    local errors=0
    
    # Check for required commands
    local required_commands=("curl" "xdg-open")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            print_color "$RED" "❌ Required command not found: $cmd"
            ((errors++))
        fi
    done
    
    # Check browser
    if ! detect_browser >/dev/null 2>&1; then
        show_browser_help
        ((errors++))
    fi
    
    return $errors
}

# Main execution function
main() {
    local start_time=$(date +%s)
    
    # Initialize
    init_directories
    
    # Handle arguments
    local teams_url
    teams_url=$(handle_arguments "$@")
    
    # Check requirements
    if ! check_requirements; then
        exit 1
    fi
    
    # Detect browser
    local browser
    if ! browser=$(detect_browser); then
        show_browser_help
        exit 1
    fi
    
    # Get browser flags
    local flags
    mapfile -t flags < <(get_browser_flags "$browser")
    
    # Log startup info
    log "Starting Teams Desktop Linux v$VERSION"
    log "Browser: $browser"
    log "URL: $teams_url"
    log "Session: ${XDG_SESSION_TYPE:-unknown}"
    log "Desktop: ${XDG_CURRENT_DESKTOP:-unknown}"
    
    # Show startup message
    print_color "$GREEN" "🚀 Launching Teams Desktop Linux..."
    print_color "$BLUE" "📱 Browser: $browser"
    print_color "$BLUE" "🌐 URL: $teams_url"
    
    # Launch browser with Teams
    exec "$browser" "${flags[@]}" "$teams_url"
}

# Error handling
trap 'print_color "$RED" "❌ An error occurred. Check $LOG_FILE for details."' ERR

# Run main function with all arguments
main "$@"